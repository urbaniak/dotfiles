#!/usr/bin/env python
# stolen from Yipit's blog
# http://tech.yipit.com/2011/11/16/183772396/

import os
import re
import subprocess
import sys


modified = re.compile('^(?:M|A)(\s+)(?P<name>.*)')

CHECKS = [
	{
		'output': 'Checking for pdbs...',
		'command': 'grep -n "import pdb" %s',
		'match_files': ['.*\.py$'],
		'print_filename': True,
	},
	{
		'output': 'Checking for ipdbs...',
		'command': 'grep -n "import ipdb" %s',
		'match_files': ['.*\.py$'],
		'print_filename': True,
	},
	{
		'output': 'Checking for print statements...',
		'command': 'grep -n print %s',
		'match_files': ['.*\.py$'],
		'ignore_files': ['.*management/commands.*', '.*manage.py'],
		'print_filename': True,
	},
	{
		'output': 'Checking for console.log()...',
		'command': 'grep -n console.log %s',
		'match_files': ['.*\.js$'],
		'print_filename': True,
	},
	{
		'output': 'Checking for debugger...',
		'command': 'grep -n debugger %s',
		'match_files': ['.*\.js$'],
		'print_filename': True,
	},
	{
		'output': 'Running Jshint...',
		'command': 'jshint %s | grep -v "Lint Free!"',
		'match_files': ['.*\.js$'],
		'print_filename': False,
	},
	{
		'output': 'Running Pyflakes...',
		'command': 'pyflakes %s',
		'match_files': ['.*\.py$'],
		'print_filename': False,
	},
	{
		'output': 'Running pep8...',
		'command': 'pep8 -r --ignore=W191,E501 %s',	 # 191 is tabs, 501 is line too long
		'match_files': ['.*\.py$'],
		'print_filename': False,
	},
	{
		'output': 'Checking for Sass changes...',
		'command': 'sass --quiet --update %s',
		'match_files': ['.*\.scss$'],
		'print_filename': True,
	},
]


def matches_file(file_name, match_files):
	return any(re.compile(match_file).match(file_name) for match_file in match_files)


def check_files(files, check):
	result = 0
	output = 0

	for file_name in files:
		if not 'match_files' in check or matches_file(file_name, check['match_files']):
			if not 'ignore_files' in check or not matches_file(file_name, check['ignore_files']):
				process = subprocess.Popen(check['command'] % file_name, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
				out, err = process.communicate()
				if out or err:
					if output == 0:
						print check['output']
						output = 1
					if check['print_filename']:
						prefix = '\t%s:' % file_name
					else:
						prefix = '\t'
					output_lines = ['%s%s' % (prefix, line) for line in out.splitlines()]
					print '\n'.join(output_lines)
					if err:
						print err
					result = 1
	return result


def main(all_files):
	files = []
	if all_files:
		for root, dirs, file_names in os.walk('.'):
			for file_name in file_names:
				files.append(os.path.join(root, file_name))
	else:
		p = subprocess.Popen(['git', 'status', '--porcelain'], stdout=subprocess.PIPE)
		out, err = p.communicate()
		for line in out.splitlines():
			match = modified.match(line)
			if match:
				files.append(match.group('name'))

	result = 0

	for check in CHECKS:
		result = check_files(files, check) or result

	sys.exit(result)


if __name__ == '__main__':
	all_files = False
	if len(sys.argv) > 1 and sys.argv[1] == '--all-files':
		all_files = True
	main(all_files)
